"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { ArrowLeft, Check, Info, Trash2, ArrowRight } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { toast } from "@/components/ui/use-toast"
import { Toaster } from "@/components/ui/toaster"

// Fontes de polui√ß√£o e suas solu√ß√µes
const pollutionSources = [
  {
    id: 1,
    name: "F√°brica emitindo fuma√ßa",
    type: "ar",
    icon: "üè≠",
    description: "Ind√∫strias que emitem gases poluentes sem filtros adequados.",
  },
  {
    id: 2,
    name: "Descarte incorreto de lixo",
    type: "solo",
    icon: "üóëÔ∏è",
    description: "Res√≠duos descartados em locais inadequados, contaminando o solo.",
  },
  {
    id: 3,
    name: "Vazamento de √≥leo",
    type: "agua",
    icon: "üõ¢Ô∏è",
    description: "Derramamento de petr√≥leo e derivados em ambientes aqu√°ticos.",
  },
  {
    id: 4,
    name: "Ve√≠culos com alta emiss√£o",
    type: "ar",
    icon: "üöó",
    description: "Autom√≥veis e caminh√µes que emitem grandes quantidades de gases poluentes.",
  },
  {
    id: 5,
    name: "Esgoto n√£o tratado",
    type: "agua",
    icon: "üöΩ",
    description: "Despejo de esgoto dom√©stico e industrial sem tratamento adequado em rios e mares.",
  },
  {
    id: 6,
    name: "Uso excessivo de agrot√≥xicos",
    type: "solo",
    icon: "üå±",
    description: "Aplica√ß√£o intensiva de pesticidas e herbicidas que contaminam o solo e len√ß√≥is fre√°ticos.",
  },
  {
    id: 7,
    name: "Queimadas",
    type: "ar",
    icon: "üî•",
    description: "Inc√™ndios florestais e queima de vegeta√ß√£o que liberam fuma√ßa e part√≠culas no ar.",
  },
  {
    id: 8,
    name: "Lixo pl√°stico nos oceanos",
    type: "agua",
    icon: "ü•§",
    description: "Ac√∫mulo de res√≠duos pl√°sticos em ambientes marinhos, afetando a vida aqu√°tica.",
  },
  {
    id: 9,
    name: "Minera√ß√£o sem controle",
    type: "solo",
    icon: "‚õèÔ∏è",
    description: "Extra√ß√£o mineral sem pr√°ticas adequadas de recupera√ß√£o ambiental.",
  },
]

// Solu√ß√µes para os problemas de polui√ß√£o
const pollutionSolutions = [
  {
    id: 1,
    name: "Filtros industriais",
    type: "ar",
    icon: "üî¨",
    description: "Instala√ß√£o de filtros e tecnologias de captura de poluentes em chamin√©s industriais.",
  },
  {
    id: 2,
    name: "Coleta seletiva",
    type: "solo",
    icon: "‚ôªÔ∏è",
    description: "Separa√ß√£o e reciclagem de res√≠duos para reduzir o volume de lixo em aterros.",
  },
  {
    id: 3,
    name: "Barreiras de conten√ß√£o",
    type: "agua",
    icon: "üß±",
    description: "Uso de barreiras flutuantes para conter vazamentos de √≥leo em ambientes aqu√°ticos.",
  },
  {
    id: 4,
    name: "Ve√≠culos el√©tricos",
    type: "ar",
    icon: "üîã",
    description: "Substitui√ß√£o de ve√≠culos a combust√£o por modelos el√©tricos ou h√≠bridos.",
  },
  {
    id: 5,
    name: "Esta√ß√µes de tratamento",
    type: "agua",
    icon: "üèóÔ∏è",
    description: "Constru√ß√£o e opera√ß√£o de esta√ß√µes de tratamento de esgoto antes do despejo em corpos d'√°gua.",
  },
  {
    id: 6,
    name: "Agricultura org√¢nica",
    type: "solo",
    icon: "üåø",
    description: "Pr√°ticas agr√≠colas que evitam o uso de agrot√≥xicos sint√©ticos e priorizam m√©todos naturais.",
  },
  {
    id: 7,
    name: "Monitoramento por sat√©lite",
    type: "ar",
    icon: "üõ∞Ô∏è",
    description: "Uso de tecnologia para detectar e combater queimadas rapidamente.",
  },
  {
    id: 8,
    name: "Limpeza de praias e oceanos",
    type: "agua",
    icon: "üßπ",
    description: "A√ß√µes de remo√ß√£o de res√≠duos pl√°sticos de ambientes marinhos e costeiros.",
  },
  {
    id: 9,
    name: "Recupera√ß√£o de √°reas degradadas",
    type: "solo",
    icon: "üå±",
    description: "T√©cnicas de reflorestamento e recupera√ß√£o do solo em √°reas afetadas pela minera√ß√£o.",
  },
]

// Tipos de polui√ß√£o
const pollutionTypes = [
  { id: "ar", name: "Polui√ß√£o do Ar", icon: "üí®", color: "bg-blue-100 border-blue-400" },
  { id: "agua", name: "Polui√ß√£o da √Ågua", icon: "üíß", color: "bg-cyan-100 border-cyan-400" },
  { id: "solo", name: "Polui√ß√£o do Solo", icon: "üå±", color: "bg-amber-100 border-amber-400" },
]

export default function Lesson9() {
  const [selectedProblem, setSelectedProblem] = useState<number | null>(null)
  const [selectedSolution, setSelectedSolution] = useState<number | null>(null)
  const [connections, setConnections] = useState<{ problemId: number; solutionId: number }[]>([])
  const [isCompleted, setIsCompleted] = useState(false)
  const [score, setScore] = useState(0)
  const [showInfo, setShowInfo] = useState(false)
  const [activeType, setActiveType] = useState<string | null>(null)
  const [showProblemInfo, setShowProblemInfo] = useState<number | null>(null)
  const [showSolutionInfo, setShowSolutionInfo] = useState<number | null>(null)

  // Verificar se a li√ß√£o foi completada
  useEffect(() => {
    const correctConnections = connections.filter((conn) => {
      const problem = pollutionSources.find((p) => p.id === conn.problemId)
      const solution = pollutionSolutions.find((s) => s.id === conn.solutionId)
      return problem?.type === solution?.type
    }).length

    // Li√ß√£o completa quando tiver pelo menos 6 conex√µes corretas
    if (correctConnections >= 6 && !isCompleted) {
      setIsCompleted(true)
      localStorage.setItem("lesson9Completed", "true")

      // Calcular pontua√ß√£o final
      const finalScore = Math.round((correctConnections / pollutionSources.length) * 100)
      setScore(finalScore)

      toast({
        title: "Parab√©ns!",
        description: `Voc√™ conectou ${correctConnections} problemas √†s suas solu√ß√µes!`,
        variant: "default",
      })
    }
  }, [connections, isCompleted])

  const handleProblemSelect = (id: number) => {
    setSelectedProblem(id)
    setSelectedSolution(null)

    // Definir o tipo ativo baseado no problema selecionado
    const problem = pollutionSources.find((p) => p.id === id)
    if (problem) {
      setActiveType(problem.type)
    }
  }

  const handleSolutionSelect = (id: number) => {
    if (selectedProblem !== null) {
      // Verificar se a solu√ß√£o √© compat√≠vel com o problema
      const problem = pollutionSources.find((p) => p.id === selectedProblem)
      const solution = pollutionSolutions.find((s) => s.id === id)

      if (!problem || !solution) return

      // Verificar se j√° existe uma conex√£o para este problema
      const existingConnectionIndex = connections.findIndex((conn) => conn.problemId === selectedProblem)

      if (existingConnectionIndex !== -1) {
        // Substituir a conex√£o existente
        const newConnections = [...connections]
        newConnections[existingConnectionIndex] = { problemId: selectedProblem, solutionId: id }
        setConnections(newConnections)
      } else {
        // Adicionar nova conex√£o
        setConnections([...connections, { problemId: selectedProblem, solutionId: id }])
      }

      // Verificar se a conex√£o est√° correta
      if (problem.type === solution.type) {
        setScore((prev) => prev + 10)
        toast({
          title: "Conex√£o correta!",
          description: `${solution.name} √© uma boa solu√ß√£o para ${problem.name}!`,
          variant: "default",
        })
      } else {
        toast({
          title: "Conex√£o incorreta",
          description: "Esta solu√ß√£o n√£o √© a mais adequada para este problema.",
          variant: "destructive",
        })
      }

      setSelectedProblem(null)
      setActiveType(null)
    } else {
      setSelectedSolution(id)
      setSelectedProblem(null)

      // Definir o tipo ativo baseado na solu√ß√£o selecionada
      const solution = pollutionSolutions.find((s) => s.id === id)
      if (solution) {
        setActiveType(solution.type)
      }
    }
  }

  const handleReset = () => {
    setConnections([])
    setSelectedProblem(null)
    setSelectedSolution(null)
    setActiveType(null)
    setIsCompleted(false)
    setScore(0)
  }

  const getSolutionForProblem = (problemId: number) => {
    const connection = connections.find((conn) => conn.problemId === problemId)
    return connection ? connection.solutionId : null
  }

  const isCorrectConnection = (problemId: number, solutionId: number) => {
    const problem = pollutionSources.find((p) => p.id === problemId)
    const solution = pollutionSolutions.find((s) => s.id === solutionId)
    return problem?.type === solution?.type
  }

  const getFilteredProblems = () => {
    if (activeType === null) {
      return pollutionSources
    }
    return pollutionSources.filter((problem) => problem.type === activeType)
  }

  const getFilteredSolutions = () => {
    if (activeType === null) {
      return pollutionSolutions
    }
    return pollutionSolutions.filter((solution) => solution.type === activeType)
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-green-50">
      <Toaster />
      <header className="bg-blue-600 text-white p-4">
        <div className="container mx-auto flex items-center justify-between">
          <Link href="/" className="flex items-center gap-2">
            <ArrowLeft className="h-5 w-5" />
            <span>Voltar</span>
          </Link>
          <div className="flex items-center gap-2">
            <Trash2 className="h-6 w-6" />
            <h1 className="text-xl font-bold">EcoAprendiz</h1>
          </div>
          <div className="flex items-center gap-2">
            <span>Pontos: {score}</span>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-bold text-blue-700">Li√ß√£o 9: Polui√ß√£o e Solu√ß√µes</h2>
              <Button
                variant="outline"
                size="icon"
                onClick={() => setShowInfo(!showInfo)}
                aria-label="Informa√ß√µes sobre polui√ß√£o"
              >
                <Info className="h-5 w-5" />
              </Button>
            </div>

            {showInfo && (
              <div className="bg-blue-50 p-4 rounded-lg mb-4 text-blue-800">
                <h3 className="font-semibold mb-2">Sobre Polui√ß√£o e Solu√ß√µes</h3>
                <p className="mb-2">
                  A polui√ß√£o √© a introdu√ß√£o de contaminantes no ambiente natural que causam efeitos adversos. Ela pode
                  afetar o ar, a √°gua e o solo, impactando a sa√∫de humana e os ecossistemas.
                </p>
                <p>
                  Nesta atividade, voc√™ aprender√° sobre diferentes tipos de polui√ß√£o e as solu√ß√µes que podem ser
                  implementadas para combat√™-los.
                </p>
              </div>
            )}

            <div className="mb-6">
              <div className="flex justify-between items-center mb-2">
                <span className="text-sm font-medium">Progresso</span>
                <span className="text-sm font-medium">
                  {connections.length} de {pollutionSources.length} problemas conectados
                </span>
              </div>
              <Progress value={(connections.length / pollutionSources.length) * 100} className="h-2" />
            </div>

            <div className="flex flex-wrap gap-2 mb-4">
              <Button
                variant={activeType === null ? "default" : "outline"}
                size="sm"
                onClick={() => setActiveType(null)}
              >
                Todos os tipos
              </Button>
              {pollutionTypes.map((type) => (
                <Button
                  key={type.id}
                  variant={activeType === type.id ? "default" : "outline"}
                  size="sm"
                  onClick={() => setActiveType(type.id)}
                  className="flex items-center gap-1"
                >
                  <span role="img" aria-hidden="true">
                    {type.icon}
                  </span>
                  {type.name}
                </Button>
              ))}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div>
                <h3 className="font-semibold mb-3 text-blue-700">Problemas de Polui√ß√£o</h3>

                <div className="space-y-3">
                  {getFilteredProblems().map((problem) => {
                    const solutionId = getSolutionForProblem(problem.id)
                    const solution = solutionId ? pollutionSolutions.find((s) => s.id === solutionId) : null
                    const isCorrect = solutionId ? isCorrectConnection(problem.id, solutionId) : null
                    const type = pollutionTypes.find((t) => t.id === problem.type)

                    return (
                      <div key={problem.id} className="relative">
                        <button
                          onClick={() => handleProblemSelect(problem.id)}
                          className={`w-full p-3 rounded-lg border-2 flex items-center gap-3 transition-all ${
                            selectedProblem === problem.id
                              ? "ring-2 ring-blue-500 bg-blue-50"
                              : solutionId
                                ? isCorrect
                                  ? "bg-green-100 border-green-400"
                                  : "bg-red-100 border-red-400"
                                : type
                                  ? type.color
                                  : "bg-gray-100 border-gray-300"
                          }`}
                          aria-label={`${problem.name} - ${solution ? "Conectado a " + solution.name : "N√£o conectado"}`}
                        >
                          <span className="text-2xl" role="img" aria-hidden="true">
                            {problem.icon}
                          </span>
                          <div className="text-left flex-1">
                            <div className="font-medium">{problem.name}</div>
                            <div className="text-xs text-gray-600">{type?.name}</div>
                          </div>

                          {solutionId && (
                            <div className="flex items-center gap-1">
                              <ArrowRight className="h-4 w-4 text-gray-400" />
                              <div className="text-sm">{solution?.name}</div>
                              {isCorrect ? (
                                <Check className="h-4 w-4 text-green-600" />
                              ) : (
                                <Trash2 className="h-4 w-4 text-red-600" />
                              )}
                            </div>
                          )}
                        </button>
                        <button
                          onClick={() => setShowProblemInfo(showProblemInfo === problem.id ? null : problem.id)}
                          className="absolute top-1 right-1 w-5 h-5 rounded-full bg-gray-200 flex items-center justify-center text-xs"
                          aria-label={`Informa√ß√µes sobre ${problem.name}`}
                        >
                          i
                        </button>

                        {showProblemInfo === problem.id && (
                          <div className="absolute z-10 top-full left-0 right-0 mt-1 p-2 bg-white rounded shadow-lg text-xs">
                            <p>{problem.description}</p>
                          </div>
                        )}
                      </div>
                    )
                  })}
                </div>
              </div>

              <div>
                <h3 className="font-semibold mb-3 text-blue-700">Solu√ß√µes</h3>

                <div className="space-y-3">
                  {getFilteredSolutions().map((solution) => {
                    const type = pollutionTypes.find((t) => t.id === solution.type)

                    return (
                      <div key={solution.id} className="relative">
                        <button
                          onClick={() => handleSolutionSelect(solution.id)}
                          className={`w-full p-3 rounded-lg border-2 flex items-center gap-3 transition-all ${
                            selectedSolution === solution.id
                              ? "ring-2 ring-blue-500 bg-blue-50"
                              : type
                                ? type.color
                                : "bg-gray-100 border-gray-300"
                          }`}
                          aria-label={`${solution.name} - Solu√ß√£o para ${type?.name}`}
                        >
                          <span className="text-2xl" role="img" aria-hidden="true">
                            {solution.icon}
                          </span>
                          <div className="text-left">
                            <div className="font-medium">{solution.name}</div>
                            <div className="text-xs text-gray-600">{type?.name}</div>
                          </div>
                        </button>
                        <button
                          onClick={() => setShowSolutionInfo(showSolutionInfo === solution.id ? null : solution.id)}
                          className="absolute top-1 right-1 w-5 h-5 rounded-full bg-gray-200 flex items-center justify-center text-xs"
                          aria-label={`Informa√ß√µes sobre ${solution.name}`}
                        >
                          i
                        </button>

                        {showSolutionInfo === solution.id && (
                          <div className="absolute z-10 top-full left-0 right-0 mt-1 p-2 bg-white rounded shadow-lg text-xs">
                            <p>{solution.description}</p>
                          </div>
                        )}
                      </div>
                    )
                  })}
                </div>

                <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                  <h4 className="font-medium mb-2 text-blue-700">Dica</h4>
                  <p className="text-sm text-blue-600">
                    Conecte cada problema de polui√ß√£o com uma solu√ß√£o do mesmo tipo (ar, √°gua ou solo). Clique em um
                    problema e depois em uma solu√ß√£o para conect√°-los.
                  </p>
                </div>
              </div>
            </div>

            {isCompleted && (
              <div className="mt-8 p-4 bg-blue-100 rounded-lg border border-blue-300 text-center">
                <h3 className="text-xl font-bold text-blue-700 mb-2">Parab√©ns! Voc√™ completou a Li√ß√£o 9</h3>
                <p className="mb-4">
                  Voc√™ aprendeu sobre diferentes tipos de polui√ß√£o e as solu√ß√µes que podem ser implementadas para
                  combat√™-los.
                </p>
                <div className="flex justify-center gap-4">
                  <Button variant="outline" onClick={handleReset}>
                    Tentar Novamente
                  </Button>
                  <Link href="/licoes/10">
                    <Button className="bg-blue-600 hover:bg-blue-700">Avan√ßar para Li√ß√£o 10</Button>
                  </Link>
                </div>
              </div>
            )}
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6">
            <h3 className="text-xl font-bold text-blue-700 mb-4">Dicas de Acessibilidade</h3>
            <ul className="space-y-2 text-gray-600">
              <li className="flex items-start gap-2">
                <Check className="h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0" />
                <span>Use Tab para navegar entre os problemas e solu√ß√µes, e Enter para selecionar.</span>
              </li>
              <li className="flex items-start gap-2">
                <Check className="h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0" />
                <span>O bot√£o "i" fornece informa√ß√µes detalhadas sobre cada problema e solu√ß√£o.</span>
              </li>
              <li className="flex items-start gap-2">
                <Check className="h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0" />
                <span>Voc√™ pode filtrar por tipo de polui√ß√£o usando os bot√µes no topo da atividade.</span>
              </li>
            </ul>
          </div>
        </div>
      </main>
    </div>
  )
}

